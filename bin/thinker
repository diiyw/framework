#!/usr/bin/env php
<?php

use thinker\Container;

$_ENV = $argv;
// 加载文件
require_once __DIR__ . "/../src/thinker/Container.php";
require_once __DIR__ . '/../src/thinker/Model.php';


class Thinker
{
    public static function init()
    {
        // 初始化模块
        if ($_ENV[1] == "module") {
            self::createModule();
            return;
        }
        self::createModel();
    }

    // 初始化模块
    // Example: ../vendor/bin/thinker module article
    public static function createModule()
    {
        $module = ucfirst($_ENV[2]);
        // 创建目录
        foreach (array("/controller", "/config", "/model") as $path) {
            @mkdir($_ENV[2] . $path, 0777, true);
        }
        $router = <<<ROUTER
<?php
return array(
            
);
ROUTER;
        $controller = <<<CONTROLLER
<?php

use thinker\Request;
use thinker\Response;
use thinker\Controller;

class $module extends Controller
{

    public function index(Request \$request, Response \$response)
    {
        \$response->display("index");
    }
}
CONTROLLER;

        $db = <<<DB
<?php
return array(
    "default" => [
        "dsn" => "mysql:dbname=default;host=127.0.0.1;charset=utf8",
        "user" => "root",
        "password" => "password",
        "tables" => [],
    ],
);
DB;
        // 创建文件
        $files = [
            "/config/router.php" => $router,
            "/controller/" . $module . ".php" => $controller,
            "/config/db.php" => $db,
        ];
        foreach ($files as $path => $content) {
            if (file_exists($module . $path)) {
                continue;
            }
            file_put_contents($module . $path, $content);
        }
    }


    // 新建模型
    // Example: ../vendor/bin/thinker user ../config/db.php
    public static function createModel()
    {
        // 加载配置
        Container::set("dbConfig", include_once $_ENV[2]);

        $module = $_ENV[1];

        // 创建模型
        $model = new \thinker\Model("default");

        $tables = Container::load("dbConfig")["default"]["tables"];

        // 创建所有模型
        foreach ($tables as $table) {

            $modelPath = explode("_", $table);

            $name = ucfirst(array_pop($modelPath));

            $modelName = $name . "Model";

            $modelPath = array_splice($modelPath, 1);

            // namespace
            $namespace = "";
            if (!empty($modelPath)) {
                $var_namespace = join("\\", $modelPath);
                $namespace = "\nnamespace " . $var_namespace . ";\n";
            }

            $path = join("/", $modelPath);
            $modelPath = $module . "/model/" . $path;

            // 模型目录创建
            @mkdir($modelPath, 0777, true);

            // 模型库创建
            $libraryPath = $module . "/library/" . $path;
            @mkdir($libraryPath, 0777, true);

            $result = $model->query("SHOW FULL COLUMNS FROM $table");

            $columns = $result->fetchAll();

            $properties = "";

            $modelFields = [];

            $conditions = "";

            if (!empty($columns)) {
                foreach ($columns as $k => $column) {
                    // 模型
                    if ($column["Key"] == "PRI") {
                        $primaryKey = $column["Field"];
                        $column["Comment"] = "主键";
                    }
                    $comment = "
    /**
     * {$column["Comment"]}
     * @var {$column["Type"]}
     * @default {$column["Default"]}
     */\n";
                    $field = self::convertUnderline(lcfirst($column["Field"]));
                    $properties .= $comment . "    public $" . $field . ";\n";
                    $modelFields[] = "            \"{$column["Field"]}\" => \$this->$field,";

                    // 模型库
                    $fieldName = $column["Field"];
                    $formField = self::convertUnderline(ltrim(str_replace($module, "", $fieldName), "_"));
                    if (stripos($column["Type"], "int") !== false) {
                        $conditions .= "\${$formField}Start = \$request->get(\"b_{$formField}_start\");
        \${$formField}End = \$request->get(\"b_{$formField}_end\");
        if (\${$formField}End && \${$formField}Start) {
            \$this->between([\"$fieldName\" => [\${$formField}Start, \${$formField}End]]);
        }
        \$$formField = \$request->get(\"p_$formField\");
        if (\${$formField}) {
            \$this->where([
                \"$fieldName\" => [\"=\", \${$formField}]
            ]);
        }
        \${$formField}More = \$request->get(\"m_$formField\");
        if (\${$formField}More) {
            \$this->where([
                \"$fieldName\" => [\">\", \${$formField}More]
            ]);
        }
        \${$formField}Mq = \$request->get(\"mq_$formField\");
        if (\${$formField}Mq) {
            \$this->where([
                \"$fieldName\" => [\">=\", \${$formField}Mq]
            ]);
        }
        \${$formField}Less = \$request->get(\"l_$formField\");
        if (\${$formField}Less) {
            \$this->where([
                \"$fieldName\" => [\"<\", \${$formField}Less]
            ]);
        }
        \${$formField}Lq = \$request->get(\"lq_$formField\");
        if (\${$formField}Lq) {
            \$this->where([
                \"$fieldName\" => [\"<=\", \${$formField}Lq]
            ]);
        }
        ";
                    }
                    if (stripos($column["Type"], "varchar") !== false) {
                        $conditions .= "\$$formField = \$request->get(\"p_$formField\");
        if (\${$formField}) {
            \$this->where([
                \"$fieldName\" => [\"=\", \${$formField}]
            ]);
        }
        \$$formField = \$request->get(\"f_$formField\");
        if (\${$formField}) {
            \$this->where([
                \"$fieldName\" => [\"LIKE\", \"%\" . \${$formField} . \"%\"]
            ]);
        }
        ";
                    }
                    if ($column["Type"] == "datetime") {
                        $conditions .= "\${$formField}Start = \$request->get(\"b_{$formField}_start\");
        \${$formField}End = \$request->get(\"b_{$formField}_end\");
        if (\${$formField}End && \${$formField}Start) {
            \$this->between([\"$fieldName\" => [\${$formField}Start, \${$formField}End]]);
        }
        ";
                    }
                }
            }
            $conditions = trim($conditions);
            $modelFields = join("\n", $modelFields);
            $modelContent = <<<MODEL
<?php
$namespace
use thinker\Model;
use thinker\Request;

class $modelName extends Model
{
    $properties
    protected \$_primaryKey = "$primaryKey";
    
    public function toArray()
    {
        return [
$modelFields
        ];
    }
    
    /**
     * 获取多条记录
     * @param Request \$request
     * @return array|mixed
     */
    public function getList(Request \$request)
    {
        \$this->filterParams(\$request);
        \$page = \$request->get("page",1);
        \$this->page(\$page);
        return \$this->select();
    }

    /**
     * 插入一条记录
     * @return int
     */
    public function create()
    {
        return \$this->insert();
    }

    /**
     * 获取单条记录
     * @param Request \$request
     * @return array|mixed
     */
    public function getOne(Request \$request)
    {
        \$this->filterParams(\$request);
        return \$this->first();
    }
    
    /**
     * 条件构造
     * @param Request \$request
     */
    private function filterParams(Request \$request)
    {
        $conditions
    }
}

MODEL;
            file_put_contents($modelPath . "/" . $modelName . ".php", $modelContent);
            // 创建基本库
            $moduleLibrary = <<<LIB
<?php
$namespace
use thinker\Container;

class {$name}Lib
{

   /**
    * 模型
    * @var \\$var_namespace\\$modelName;
    */
    private \$model;
    
   /**
    * 请求对象
    * @var \\thinker\\Request;
    */
    private \$request;

    public function __construct()
    {
        \$this->model = new $modelName();
        \$this->request = Container::load("request");
    }
}
LIB;
            file_put_contents($libraryPath . "/" . $name . "Lib.php", $moduleLibrary);
        }
    }

    // 下划线变量转驼峰命名
    public static function convertUnderline($str)
    {
        $str = preg_replace_callback('/([-_]+([a-z]{1}))/i', function ($matches) {
            return strtoupper($matches[2]);
        }, $str);
        return $str;
    }
}

Thinker::init();