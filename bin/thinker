#!/usr/bin/env php
<?php

// 下划线变量转驼峰命名
function convertUnderline($str)
{
    $str = preg_replace_callback('/([-_]+([a-z]{1}))/i', function ($matches) {
        return strtoupper($matches[2]);
    }, $str);
    return $str;
}

// $_ENV[1] = $argv[1] 连接名称
// $_ENV[2] = $argv[2] 表名称
// $_ENV[3] = $argv[3] 数据库配置文件

$_ENV = $argv;
// 加载文件
require_once __DIR__ . "/../src/thinker/Registry.php";
require_once __DIR__ . '/../src/thinker/Model.php';

$config = include_once $_ENV[3];

\thinker\Registry::set("dbConfig", $config);

try {

    // 初始化模块
    if ($_ENV[1] == "module") {
        $module = ucfirst($_ENV[2]);
        // 创建目录
        foreach (array("/rest", "/controller", "/config", "/admin") as $path) {
            mkdir($_ENV[2] . $path, 0777, true);
        }
        // 创建文件
        $files = [
            "/Router.php" => <<<ROUTER
<?php

namespace $_ENV[2];

class Router
{
    public function route()
    {
        return array(
            
        );
    }
}
ROUTER,
            "/rest/" . $module . ".php" => <<<REST
<?php

namespace $_ENV[2]\rest;

use core\Rest;

class $module extends Rest
{

    public function get()
    {

    }

    public function post()
    {

    }

    public function put()
    {

    }

    public function delete()
    {

    }
}
REST,
            "/controller/" . $module . ".php" => <<<CONTROLLER
<?php

namespace $_ENV[2]\controller;

use core\Controller;

class $module extends Controller
{

    public function index()
    {
        \$this->display("index");
    }
}
CONTROLLER,
            "/config/db.php" => <<<DB
return [];
DB,
        ];
        foreach ($files as $path => $content) {
            file_put_contents($path, $content);
        }
        return;
    }

    // 创建应用
    class App extends thinker\Model
    {
        public $name = "default";

        public function __construct()
        {
            $this->name = $_ENV[1];
            parent::__construct();
        }
    }

    // 创建模型
    $app = new App();

    $table = $_ENV[2];

    $modelName = ucfirst($table) . "Model";

    $result = $app->query("SHOW FULL COLUMNS FROM $table");

    $colunms = $result->fetchAll();

    $properties = "";

    $model = [];

    if (!empty($colunms)) {
        foreach ($colunms as $k => $colunm) {
            $comment = "
    /**
     * {$colunm["Comment"]}
     * @var {$colunm["Type"]}
     * @default {$colunm["Default"]}
     */\n";
            if ($colunm["Key"] == "PRI") {
                $primaryKey = $colunm["Field"];
            }
            $field = convertUnderline(lcfirst($colunm["Field"]));
            $properties .= $comment . "    public $" . $field . ";\n";
            $model[] = "            \"{$colunm["Field"]}\" => \$this->$field,";
        }
    }
    $model = join("\n", $model);
    $modelTPL = <<<MODEL
<?php

namespace $table;

use thinker\Model;

class $modelName extends Model
{
    $properties
    protected \$_primaryKey = "$primaryKey";
    
    public function toArray()
    {
        return [
$model
        ];
    }
}

MODEL;

    file_put_contents($modelName . ".php", $modelTPL);

} catch (\Exception $e) {
    echo $e->getMessage();
}